#!/usr/bin/env php
<?php
/**
 * @package Veneer
 * @license http://opensource.org/licenses/MIT
 */

declare(strict_types=1);

namespace DecodeLabs\Veneer;

$basePath = getcwd();

foreach ([
    $basePath . '/vendor/autoload.php',
    __DIR__ . '/../../../autoload.php',
    __DIR__ . '/../vendor/autoload.php'
] as $file) {
    if (file_exists($file)) {
        require $file;
        break;
    }
}

use DecodeLabs\Atlas;
use DecodeLabs\Exceptional;
use DecodeLabs\Terminus as Cli;
use DecodeLabs\Veneer\Stub\Generator;

// Check dependencies
if (!class_exists(Atlas::class)) {
    throw Exceptional::Setup('Atlas is required for interactive stub generation');
}
if (!class_exists(Cli::class)) {
    throw Exceptional::Setup('Terminus is required for interactive stub generation');
}

// Load source generator
if (is_file($genPath = __DIR__ . '/../src/Veneer/Stub/Generator.php')) {
    require_once $genPath;
}


// Prepare arguments
Cli::getCommandDefinition()
    ->addArgument('?stubPath', 'Directory to save the stub');
Cli::prepareArguments();


// Ask for stub path
if (null === ($stubPath = Cli::getArgument('stubPath'))) {
    $stubPath = 'stubs/';
    //$stubPath = Cli::ask('Where would you like to save it?', $stubPath);
}

$scanDir = Atlas::dir(getcwd());
$stubDir = Atlas::dir($stubPath);

// Scan
$generator = new Generator($scanDir, $stubDir);
$bindings = $generator->scan();

if (empty($bindings)) {
    Cli::warning('There are no Veneer bindings to stub');
    exit;
}

Cli::newLine();

foreach ($bindings as $binding) {
    Cli::{'brightMagenta'}($binding->getProviderClass().' ');
    $generator->generate($binding);
    Cli::success('done');
}

Cli::newLine();

exit;
